% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shape.R
\name{connectedComponents}
\alias{connectedComponents}
\title{Find Connected Components in a binary Image}
\usage{
connectedComponents(image, connectivity = 8, algorithm = "grana")
}
\arguments{
\item{image}{An an 8-bit (8U) single-channel \code{\link{Image}} object.}

\item{connectivity}{The connetivity neighborhood to decide whether 2 pixels
are contiguous. This parameter can take two values:
\itemize{
 \item{4: }{the neighborhood of a pixel are the four pixels located above
  (north), below (south), to the left (west) and right (east) of the pixel.}
 \item{8 (the default): }{the neighborhood of a pixel includes the four
  4-neighbors and the four pixels along the diagonal directions (northeast,
  northwest, southeast, and southwest).}
}}

\item{algorithm}{A character string specifying the connected components
labeling algorithm to use. This parameter can take two values:
\itemize{
 \item{"grana" (the default): }{Block-based connected-component labeling for
  8-way connectivity, scan array union find labeling for 4-way connectivity.}
 \item{"wu": }{Scan array union find labeling for both 8-way and 4-way
  connectivity.}
}}
}
\value{
A list with 2 (or 3) items:
 \itemize{
  \item{n: }{the number of connected components in the image.}
  \item{labels: }{a 16-bit (16U) single-channel  image in which each pixel of
   each connected component is represented by the identity number of the
   component, and the background pixels by zero.}
  \item{table (if `return_table = TRUE`): }{a dataframe with 3 columns
   representing the identity of the connected components (id), and the x-y
   coordinates of the pixels they are composed of. }
 }
}
\description{
\code{connectedComponents} computes the connected components
 (i.e. areas of contiguous non-zero pixels) of a binary image.
}
\examples{
dots <- image(system.file("sample_img/dots.jpg", package = "Rvision"))
dots_gray <- changeColorSpace(dots, "GRAY")
dots_bin <- dots_gray < 200
cc <- connectedComponents(dots_bin)
cc_mat <- as.matrix(cc$labels)
colors <- c("black", rainbow(cc$n))
cc_img <- image(array(t(col2bgr(colors[cc_mat + 1])), dim = dim(dots)))
plot(cc_img)

}
\seealso{
\code{\link{Image}}
}
\author{
Simon Garnier, \email{garnier@njit.edu}
}
