% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filters.R
\name{adaptiveThreshold}
\alias{adaptiveThreshold}
\title{Adaptive Thresholding}
\usage{
adaptiveThreshold(
  image,
  max_value = 255,
  method = "mean",
  threshold_type = "inverse",
  block_size = 31,
  C = 25,
  in_place = FALSE
)
}
\arguments{
\item{image}{An an 8-bit (8U) single-channel \code{\link{Image}} object.}

\item{max_value}{Non-zero numerical value assigned to the pixels above the
adaptive threshold (default: 255).}

\item{method}{The name of the adaptive thresholding algorithm to use. It can
be either 'mean' - mean of the block_size * block_size neighborhood - or
'gaussian' - Gaussian weighted sum of the block_size * block_size
neighborhood (default: 'mean').}

\item{threshold_type}{The name of the threshold type to use. It can be either
'binary' or 'inverse' (default: 'inverse').}

\item{block_size}{Size of a pixel neighborhood that is used to calculate a
threshold value for the pixel (default: 31).}

\item{C}{Constant subtracted from the mean or weighted mean. Normally, it is
positive but may be zero or negative as well (default: 25).}

\item{in_place}{A logical indicating whether the change should be applied to
the image itself (TRUE, faster but destructive) or to a copy of it (FALSE,
the default, slower but non destructive).}
}
\value{
An \code{\link{Image}} object if \code{in_place=FALSE}. Otherwise, it
 returns nothing and modifies \code{image} in place.
}
\description{
\code{adaptiveThreshold} transforms a grayscale image to a
 binary image using an adaptive threshold.
}
\examples{
balloon <- image(system.file("sample_img/balloon1.png", package = "Rvision"))
balloon_gray <- changeColorSpace(balloon, "GRAY")
balloon_th <- adaptiveThreshold(balloon_gray)
plot(balloon_th)

}
\seealso{
\code{\link{Image}}
}
\author{
Simon Garnier, \email{garnier@njit.edu}
}
