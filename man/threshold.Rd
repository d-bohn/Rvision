% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filters.R
\name{threshold}
\alias{threshold}
\title{Thresholding}
\usage{
threshold(
  image,
  thresh = 127,
  max_value = 255,
  method = "none",
  threshold_type = "inverse",
  target = "new",
  in_place = NULL
)
}
\arguments{
\item{image}{An an 8-bit (8U) or 32-bit floating (32F) \code{\link{Image}}
object.}

\item{thresh}{A numeric threshold value (default: 127).}

\item{max_value}{Non-zero value assigned to the pixels for which the
condition determined by `threshold_type` is satisfied (default: 255).}

\item{method}{The name of the automated thresholding algorithm to use. It can
be any of the following:
\itemize{
 \item{"none":}{the user-defined `threshold` value is used (the default).}
 \item{"Otsu":}{use Otsu algorithm to choose the optimal threshold value.
  Only works for 8-bit (8U) single-channel \code{\link{Image}} objects.}
 \item{"triangle":}{use triangle algorithm to choose the optimal threshold
  value. Only works for 8-bit (8U) single-channel \code{\link{Image}} objects.}
}}

\item{threshold_type}{The name of the threshold type to use. It can be any of
the following:
\itemize{
 \item{"binary":}{each pixel is replaced by `max_value` if its value is above
  the threshold, and by zero otherwise.}
 \item{"inverse":}{each pixel is replaced by zero if its value is above the
  threshold, and by `max_value` otherwise.}
 \item{"truncate":}{each pixel is replaced by `threshold` if its value is
  above the threshold, and is unchanged otherwise.}
 \item{"to_zero":}{each pixel is replaced by zero if its value is below the
 threshold, and is unchanged otherwise.}
 \item{"to_zero_inverse":}{each pixel is replaced by zero if its value is
  above the threshold, and is unchanged otherwise.}
}}

\item{target}{The location where the results should be stored. It can take 3
values:
\itemize{
 \item{"new":}{a new \code{\link{Image}} object is created and the results
  are stored inside (the default).}
 \item{"self":}{the results are stored back into \code{image} (faster but
  destructive).}
 \item{An \code{\link{Image}} object:}{the results are stored in another
  existing \code{\link{Image}} object. This is fast and will not replace the
  content of \code{image} but will replace that of \code{target}. Note that
  if \code{target} does not have the same dimensions, number of channels, and
  bit depth as \code{image}, an error may be thrown.}
}}

\item{in_place}{Deprecated. Use \code{target} instead.}
}
\value{
If \code{target="new"}, the function returns an \code{\link{Image}}
 object. If \code{target="self"}, the function returns nothing and modifies
 \code{image} in place. If \code{target} is an \code{\link{Image}} object,
 the function returns nothing and modifies that \code{\link{Image}} object in
 place.
}
\description{
\code{threshold} transforms an image to a binary image.
}
\examples{
balloon <- image(system.file("sample_img/balloon1.png", package = "Rvision"))
balloon_gray <- changeColorSpace(balloon, "GRAY")
balloon_th <- threshold(balloon_gray)

}
\seealso{
\code{\link{Image}}
}
\author{
Simon Garnier, \email{garnier@njit.edu}
}
